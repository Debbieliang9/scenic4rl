trainer = ppo.PPOTrainer(env="my_env", config={

    'model': {
                'dim':72,
              'conv_filters': [
                  [96,96,16],
                  [36,48,16]
              ],
              'fcnet_hiddens': [256, 256],
              'use_lstm': False,
          }
    
})



----
custom model: https://docs.ray.io/en/stable/rllib-models.html 
model options: https://github.com/ray-project/ray/blob/master/rllib/models/catalog.py 
vison net example: https://github.com/ray-project/ray/blob/master/rllib/models/torch/visionnet.py

from ray.rllib.models import ModelCatalog
from ray.rllib.models.pytorch.model import TorchModel

class CustomTorchModel(TorchModel):

    def __init__(self, obs_space, num_outputs, options):
        TorchModel.__init__(self, obs_space, num_outputs, options)
        pass

    def _forward(self, input_dict, hidden_state):
        """Forward pass for the model.

        Prefer implementing this instead of forward() directly for proper
        handling of Dict and Tuple observations.

        Arguments:
            input_dict (dict): Dictionary of tensor inputs, commonly
                including "obs", "prev_action", "prev_reward", each of shape
                [BATCH_SIZE, ...].
            hidden_state (list): List of hidden state tensors, each of shape
                [BATCH_SIZE, h_size].

        Returns:
            (outputs, feature_layer, values, state): Tensors of size
                [BATCH_SIZE, num_outputs], [BATCH_SIZE, desired_feature_size],
                [BATCH_SIZE], and [len(hidden_state), BATCH_SIZE, h_size].
        """
        obs = input_dict["obs"]
        pass 
        return logits, features, value, hidden_state

ModelCatalog.register_custom_model("my_model", CustomTorchModel)

trainer = ppo.PPOTrainer(env="my_env", config={
    "model": {
        "custom_model": "my_model",
        "custom_options": {},  # extra options to pass to your model
    },
})



-----
